# {{ ansible_managed }}
#############################################################################
# Copyright 2018 Ramon Fischer                                              #
#                                                                           #
# Licensed under the Apache License, Version 2.0 (the "License");           #
# you may not use this file except in compliance with the License.          #
# You may obtain a copy of the License at                                   #
#                                                                           #
#     http://www.apache.org/licenses/LICENSE-2.0                            #
#                                                                           #
# Unless required by applicable law or agreed to in writing, software       #
# distributed under the License is distributed on an "AS IS" BASIS,         #
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  #
# See the License for the specific language governing permissions and       #
# limitations under the License.                                            #
#############################################################################

# functions
## translate words (english<->german)
dic()
{
    input_string=${*// /+}
    w3m -dump "http://pocket.dict.cc/?s=${input_string}" | head -n -6 | tail -n +6 | tac
}

## bash: execute bell when command is finished
precmd()
{
    eval "${PROMPT_COMMAND}"
}
PROMPT_COMMAND+='tput bel;'

## improved less
### syntax highlighting
lessh()
{
    export LESSOPEN="| /usr/bin/src-hilite-lesspipe.sh %s"
    less "${@}"
}
### get information from binary files
lessp()
{
    export LESSOPEN="| /usr/local/bin/lesspipe %s"
    less "${@}"
}

## do not include faulty commands in history
zshaddhistory()
{
    whence ${${(z)1}[1]} >| /dev/null || return 1
}

## generate strong passwords with ~130 bit entropy
genpw()
{
    local -i password_length=20
    local remove_characters="[:space:]"

    while [[ "${#}" ]]
    do
        case "${1}" in
            "-a" | "--no-lowercase")
                remove_characters+="a-z"
                ;;

            "-A" | "--no-uppercase")
                remove_characters+="A-Z"
                ;;

            "-n" | "--no-numbers")
                remove_characters+="0-9"
                ;;

            "-s" | "--no-special")
                remove_characters+="[:punct:]"
                ;;

            "-l" | "--length")
                password_length="${2}"
                shift
                ;;

            "-h" | "--help")
                echo ""
                echo "Usage: ${0} [options] <arguments>"
                echo ""
                echo "OPTIONS:"
                echo "  -a, --no-lowercase              exclude lowercase characters"
                echo "  -A, --no-uppercase              excluce uppercase characters"
                echo "  -n, --no-numbers                exclude numeric characters"
                echo "  -s, --no-special                exclude special characters"
                echo "  -l, --length <password_length>  define password length"
                echo "  -h, --help                      show this message"
                echo ""
                echo "EXAMPLES:"
                echo "  generate a password with 24 characters"
                echo "      ${0} --length 24"
                echo ""
                echo "  exclude special and uppercase characters"
                echo "      ${0} --no-special --no-uppercase"
                return 0
        esac
        shift 1 >/dev/null 2>&1 || break
    done

    # must be echoed because of a trailing percent sign
    echo $(strings --bytes=1 < /dev/urandom | tr --delete "${remove_characters}" | head --bytes="${password_length}")
}

# prompt shell
## colour
if [[ $(id -u) == 0 ]]
then
    zstyle ':prompt:grml:*:items:user' pre '%F{yellow}'
else
    zstyle ':prompt:grml:*:items:user' pre '%F{magenta}'
fi

# source
## autojump
source "/usr/share/autojump/autojump.zsh"
## zsh-autosuggestions
source "/usr/local/share/git/zsh/zsh-autosuggestions/zsh-autosuggestions.zsh"
## zsh-syntax-highlighting
source "/usr/local/share/git/zsh/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh"

# aliases
alias aria2c="aria2c -s 4 -x 8"
alias dd="dd bs=64K status=progress"
alias diff="diff -Nur --color"
alias growisofs="growisofs -dvd-compat"
alias halt="echo 'Are you sure? Please run: /sbin/halt'"
alias history="history -i"
alias ip="ip -c"
alias l="ls -vCF"
alias la="ls -va"
alias listgroups="awk -F \":\" '{ printf \"Group name: %-20s GID: %-10s\n\", \$1, \$3 }' /etc/group | sort -nk 5"
alias listusers="awk -F \":\" '{ printf \"Username: %-20s UID: %-10s GID: %-10s\n\", \$1, \$3, \$4 }' /etc/passwd | sort -nk 4"
alias ll="ls -vl"
alias ln="ln -v"
alias mkdir="mkdir -p"
alias path="echo ${PATH//:/'\n'}"
alias poweroff="echo 'Are you sure? Please run: /sbin/poweroff'"
alias reboot="echo 'Are you sure? Please run: /sbin/reboot'"
alias rsync="rsync -aHAXx --numeric-ids --info=progress2 -e 'ssh -T -c aes256-gcm@openssh.com -o Compression=no -x'"
alias tree="tree -F"
alias shutdown="echo 'Are you sure? Please run: /sbin/shutdown'"

# export
## set default text editor
export EDITOR="$(command -v nvim)"
export VISUAL="$(command -v nvim)"
## location for x cache
export XDG_CACHE_HOME="/tmp/$(id -un)/.cache/"
## set colours for hard and orphaned symlinks
export LS_COLORS="mh=44;37:or=40;31;01"
## less: enable syntax highlighting
export LESS="-R -M --shift 5"
## zsh-autosuggest: only use small buffer for strings
export ZSH_AUTOSUGGEST_BUFFER_MAX_SIZE="20"
## do not include critical commands in history
export HISTORY_IGNORE="(/sbin/halt*|/sbin/poweroff*|/sbin/reboot*|/sbin/shutdown*|cd*|clear*|exit*|halt*|ls*|poweroff*|pwd*|reboot*|rm*|shutdown*|sudo*)"

# output when opening shell
## list who is logged in
who
## list tmux sessions
if [[ $(pgrep "tmux") ]]
then
    tmux ls
fi
