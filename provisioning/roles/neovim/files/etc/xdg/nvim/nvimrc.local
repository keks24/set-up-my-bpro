" {{ ansible_managed }}

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Maintainer: 
"       Amir Salihefendic
"       http://amix.dk - amix@amix.dk
"
" Version: 
"       5.0 - 29/05/12 15:43:36
"
" Blog_post: 
"       http://amix.dk/blog/post/19691#The-ultimate-Vim-configuration-on-Github
"
" Awesome_version:
"       Get this config, nice color schemes and lots of plugins!
"
"       Install the awesome version from:
"
"           https://github.com/amix/vimrc
"
" Syntax_highlighted:
"       http://amix.dk/vim/vimrc.html
"
" Raw_version: 
"       http://amix.dk/vim/vimrc.txt
"
" Sections:
"    -> General
"    -> VIM user interface
"    -> Colors and Fonts
"    -> Files and backups
"    -> Text, tab and indent related
"    -> Visual mode related
"    -> Moving around, tabs and buffers
"    -> Status line
"    -> Editing mappings
"    -> vimgrep searching and cope displaying
"    -> Spell checking
"    -> Misc
"    -> Helper functions
"
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => General
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Sets how many lines of history VIM has to remember
set history=700

" Enable filetype plugins
filetype plugin on
filetype indent on

" Set to auto read when a file is changed from the outside
set autoread

" With a map leader it's possible to do extra key combinations
" like <leader>w saves the current file
let mapleader = ","
let g:mapleader = ","

" Fast saving
nmap <leader>w :w!<cr>

" :W sudo saves the file 
" (useful for handling the permission-denied error)
" custom
"command W w !sudo tee % > /dev/null


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => VIM user interface
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Set 7 lines to the cursor - when moving vertically using j/k
set so=7

" Avoid garbled characters in Chinese language windows OS
let $LANG='en' 
set langmenu=en
source $VIMRUNTIME/delmenu.vim
source $VIMRUNTIME/menu.vim

" Turn on the WiLd menu
set wildmenu

" Ignore compiled files
set wildignore=*.o,*~,*.pyc
if has("win16") || has("win32")
    set wildignore+=*/.git/*,*/.hg/*,*/.svn/*,*/.DS_Store
else
    set wildignore+=.git\*,.hg\*,.svn\*
endif

"Always show current position
set ruler

" Height of the command bar
set cmdheight=2

" A buffer becomes hidden when it is abandoned
set hid

" Configure backspace so it acts as it should act
set backspace=eol,start,indent
set whichwrap+=<,>,h,l

    " In many terminal emulators the mouse works just fine, thus enable it.
    "if has('mouse')
      set mouse=""
    "endif

    " Ignore case when searching
    set ignorecase

    " When searching try to be smart about cases 
    set smartcase

    " Highlight search results
    set hlsearch

    " Makes search act like search in modern browsers
    set incsearch 

    " Don't redraw while executing macros (good performance config)
    set lazyredraw 

    " For regular expressions turn magic on
    set magic

    " Show matching brackets when text indicator is over them
    set showmatch 
    " How many tenths of a second to blink when matching brackets
    set mat=2

    " No annoying sound on errors
    set noerrorbells
    set novisualbell
    set t_vb=
    set tm=500

    " Add a bit extra margin to the left
    set foldcolumn=1


    """""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
    " => Colors and Fonts
    """""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
    " Enable syntax highlighting
    "syntax enable 

    " custom
    " switch syntax highlighting on when the terminal has colours
    " swtich on highlighting the last used search pattern
    if (&t_Co > 2 || has("gui_running")) && !exists("syntax_on")
        syntax on
    endif

    try
        colorscheme desert
    catch
    endtry

    set background=dark

    " Set extra options when running in GUI mode
    if has("gui_running")
        set guioptions-=T
        set guioptions-=e
        set t_Co=256
        set guitablabel=%M\ %t
    endif

    " Set utf8 as standard encoding and en_US as the standard language
    set encoding=utf8

    " Use Unix as the standard file type
    set ffs=unix,dos,mac

    """""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
    " => Files, backups and undo
    """""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
    " Turn backup off, since most stuff is in SVN, git et.c anyway...
    "set nobackup
    "set nowb
    "set noswapfile

    " custom
    if version >= 703
        " enable persistent-undo
        set undofile
        set undodir=~/.config/nvim/tmp/undo//
    endif
    set backupdir=~/.config/nvim/tmp/backup//
    set directory=~/.config/nvim/tmp/swp//

    """""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
    " => Text, tab and indent related
    """""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
    " Use spaces instead of tabs
    set expandtab

    " Be smart when using tabs ;)
    set smarttab

    " 1 tab == 4 spaces
    set shiftwidth=4
    set tabstop=4

    " Linebreak on 500 characters
    set lbr
    set tw=500

    set ai "Auto indent
    set si "Smart indent
    set wrap "Wrap lines


    """"""""""""""""""""""""""""""
    " => Visual mode related
    """"""""""""""""""""""""""""""
    " Visual mode pressing * or # searches for the current selection
    " Super useful! From an idea by Michael Naumann
    vnoremap <silent> * :call VisualSelection('f', '')<CR>
    vnoremap <silent> # :call VisualSelection('b', '')<CR>


    """""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
    " => Moving around, tabs, windows and buffers
    """""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
    " Treat long lines as break lines (useful when moving around in them)
    " custom
    "map j gj
    "map k gk

    " Map <Space> to / (search) and Ctrl-<Space> to ? (backwards search)
    map <space> /
    map <c-space> ?

    " Disable highlight when <leader><cr> is pressed
    map <silent> <leader><cr> :noh<cr>

    " Smart way to move between windows
    map <C-j> <C-W>j
    map <C-k> <C-W>k
    map <C-h> <C-W>h
    map <C-l> <C-W>l

    " Close the current buffer
    map <leader>bc :Bclose<cr>

    " Close all the buffers
    map <leader>ba :BufOnly<cr>

    " Useful mappings for managing tabs
    map <leader>tn :tabnew<cr>
    map <leader>to :tabonly<cr>
    map <leader>tc :tabclose<cr>
    map <leader>tm :tabmove<cr>
    map <leader>t<leader> :tabn<cr>

    " Let 'tl' toggle between this and the last accessed tab
    let g:lasttab = 1
    nmap <Leader>tl :exe "tabn ".g:lasttab<CR>
    au TabLeave * let g:lasttab = tabpagenr()


    " Opens a new tab with the current buffer's path
    " Super useful when editing files in the same directory
    map <leader>te :tabedit <c-r>=expand("%:p:h")<cr>/

    " Switch CWD to the directory of the open buffer
    map <leader>cd :cd %:p:h<cr>:pwd<cr>

    " Specify the behavior when switching between buffers 
    try
      set switchbuf=useopen,usetab,newtab
      set stal=2
    catch
    endtry

    " Return to last edit position when opening files (You want this!)
    autocmd BufReadPost *
         \ if line("'\"") > 1 && line("'\"") <= line("$") |
         \   exe "normal! g`\"" |
         \ endif

    " Remember info about open buffers on close
    set viminfo^=%


    """"""""""""""""""""""""""""""
    " => Status line
    """"""""""""""""""""""""""""""
    " Always show the status line
    set laststatus=2

    " Format the status line
    set statusline=\ %{HasPaste()}%F%m%r%h\ %w\ \ CWD:\ %r%{getcwd()}%h\ \ \ Line:\ %l\


    """""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
    " => Editing mappings
    """""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
    " Remap VIM 0 to first non-blank character
    map 0 ^

    " Move a line of text using ALT+[jk] or Comamnd+[jk] on mac
    nmap <M-j> mz:m+<cr>`z
    nmap <M-k> mz:m-2<cr>`z
    vmap <M-j> :m'>+<cr>`<my`>mzgv`yo`z
    vmap <M-k> :m'<-2<cr>`>my`<mzgv`yo`z

    if has("mac") || has("macunix")
      nmap <D-j> <M-j>
      nmap <D-k> <M-k>
      vmap <D-j> <M-j>
      vmap <D-k> <M-k>
    endif

    " Delete trailing white space on save, useful for Python and CoffeeScript ;)
    func! DeleteTrailingWS()
      exe "normal mz"
      %s/\s\+$//ge
      exe "normal `z"
    endfunc
    autocmd BufWrite *.py :call DeleteTrailingWS()
    autocmd BufWrite *.coffee :call DeleteTrailingWS()


    """""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
    " => Ack searching and cope displaying
    "    requires ack.vim - it's much better than vimgrep/grep
    """""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
    " When you press gv you Ack after the selected text
    vnoremap <silent> gv :call VisualSelection('gv', '')<CR>

    " Open Ack and put the cursor in the right position
    map <leader>g :Ack 

    " When you press <leader>r you can search and replace the selected text
    vnoremap <silent> <leader>r :call VisualSelection('replace', '')<CR>

    " Do :help cope if you are unsure what cope is. It's super useful!
    "
    " When you search with Ack, display your results in cope by doing:
    "   <leader>cc
    "
    " To go to the next search result do:
    "   <leader>n
    "
    " To go to the previous search results do:
    "   <leader>p
    "
    map <leader>cc :botright cope<cr>
    map <leader>co ggVGy:tabnew<cr>:set syntax=qf<cr>pgg
    map <leader>n :cn<cr>
    map <leader>p :cp<cr>


    """""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
    " => Spell checking
    """""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
    " Pressing ,ss will toggle and untoggle spell checking
    map <leader>ss :setlocal spell!<cr>

    " Shortcuts using <leader>
    map <leader>sn ]s
    map <leader>sp [s
    map <leader>sa zg
    map <leader>s? z=


    """""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
    " => Misc
    """""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
    " Remove the Windows ^M - when the encodings gets messed up
    noremap <Leader>m mmHmt:%s/<C-V><cr>//ge<cr>'tzt'm

    " Quickly open a buffer for scribble
    map <leader>q :e ~/buffer<cr>

    " Quickly open a markdown buffer for scribble
    map <leader>x :e ~/buffer.md<cr>

    " Toggle paste mode on and off
    map <leader>pp :setlocal paste!<cr>




    """""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
    " => Helper functions
    """""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
    " custom
    function! HighlightRepeats() range
      let lineCounts = {}
      let lineNum = a:firstline
      while lineNum <= a:lastline
        let lineText = getline(lineNum)
        if lineText != ""
          let lineCounts[lineText] = (has_key(lineCounts, lineText) ? lineCounts[lineText] : 0) + 1
        endif
        let lineNum = lineNum + 1
      endwhile
      exe 'syn clear Repeat'
      for lineText in keys(lineCounts)
        if lineCounts[lineText] >= 2
          exe 'syn match Repeat "^' . escape(lineText, '".\^$*[]') . '$"'
        endif
      endfor
    endfunction
    command! -range=% HighlightRepeats <line1>,<line2>call HighlightRepeats()

    function! FoldColumnToggle()
    if &foldcolumn
        setlocal foldcolumn=0
    else
        setlocal foldcolumn=1
    endif
    endfunction

    function! CmdLine(str)
        exe "menu Foo.Bar :" . a:str
        emenu Foo.Bar
        unmenu Foo
    endfunction 

    function! VisualSelection(direction, extra_filter) range
        let l:saved_reg = @"
        execute "normal! vgvy"

        let l:pattern = escape(@", '\\/.*$^~[]')
        let l:pattern = substitute(l:pattern, "\n$", "", "")

        if a:direction == 'b'
            execute "normal ?" . l:pattern . "^M"
        elseif a:direction == 'gv'
            call CmdLine("Ack \"" . l:pattern . "\" " )
        elseif a:direction == 'replace'
            call CmdLine("%s" . '/'. l:pattern . '/')
        elseif a:direction == 'f'
            execute "normal /" . l:pattern . "^M"
        endif

        let @/ = l:pattern
        let @" = l:saved_reg
    endfunction

    " Returns true if paste mode is enabled
    function! HasPaste()
        if &paste
            return 'PASTE MODE  '
        en
        return ''
    endfunction

    " Don't close window, when deleting a buffer
    command! Bclose call <SID>BufcloseCloseIt()
    function! <SID>BufcloseCloseIt()
       let l:currentBufNum = bufnr("%")
       let l:alternateBufNum = bufnr("#")

       if buflisted(l:alternateBufNum)
         buffer #
       else
         bnext
       endif

       if bufnr("%") == l:currentBufNum
         new
       endif

       if buflisted(l:currentBufNum)
         execute("bdelete! ".l:currentBufNum)
       endif
    endfunction

    " custom
    " edit vimrc.local
    nnoremap <leader>E :e ~/.config/nvim/nvimrc.local<cr>

    " reload config
    nnoremap <C-r> :source ~/.config/nvim/init.vim<cr>

    " quick quit
    nnoremap <C-q> :q<cr>

    " map esc to ctrl + c
    imap <C-c> <esc>

    " open files from buffer
    nnoremap q :bnext<cr>
    nnoremap Q :bprevious<cr>

    " toggle paste mode
    set pastetoggle=<F10>

    """""""""""""""""""""""""""""""
    " <start> plugin area <start> "
    """""""""""""""""""""""""""""""

    " vundle
    set nocompatible              " be iMproved, required
    filetype off                  " required

    " set the runtime path to include Vundle and initialize
    set rtp+=/usr/local/share/git/neovim/bundle/Vundle.vim
    "call vundle#begin()
    " alternatively, pass a path where Vundle should install plugins
    call vundle#begin('/usr/local/share/git/neovim/bundle')

    "let Vundle manage Vundle, required
    Plugin 'VundleVim/Vundle.vim'

    " other plugins
    " vimwiki
    Plugin 'vimwiki/vimwiki'

    " nerdtree
    Plugin 'scrooloose/nerdtree'

    " ctrlp.vim
    Plugin 'ctrlpvim/ctrlp.vim'

    " syntastic
    Plugin 'vim-syntastic/syntastic'

    " vim-easymotion
    Plugin 'easymotion/vim-easymotion'

    " vim-surround
    Plugin 'tpope/vim-surround'

    " vim-repeat
    Plugin 'tpope/vim-repeat'

    " necessary for saving state with tmux-resurrect
    " vim-obsession
    Plugin 'tpope/vim-obsession'

    " vim-fugitive
    Plugin 'tpope/vim-fugitive'

    " gv
    " requires 'vim-fugitive'
    Plugin 'junegunn/gv.vim'
    " vim-airline
    Plugin 'vim-airline/vim-airline'
    Plugin 'vim-airline/vim-airline-themes'

    " vim-gitgutter
    Plugin 'airblade/vim-gitgutter'

    " nerdcommenter
    Plugin 'scrooloose/nerdcommenter'

    " bufonly
    Plugin 'vim-scripts/BufOnly.vim'

    " vim-tmux-navigator
    Plugin 'christoomey/vim-tmux-navigator'

    " vim-tmux
    Plugin 'ericpruitt/tmux.vim', {'rtp': 'vim/'}

    " All of your Plugins must be added before the following line
    call vundle#end()            " required
    filetype plugin indent on    " required
    " To ignore plugin indent changes, instead use:
    "filetype plugin on
    "
    " Brief help
    " :PluginList       - lists configured plugins
    " :PluginInstall    - installs plugins; append `!` to update or just :PluginUpdate
    " :PluginSearch foo - searches for foo; append `!` to refresh local cache
    " :PluginClean      - confirms removal of unused plugins; append `!` to auto-approve removal
    "
    " see :h vundle for more details or wiki for FAQ
    " Put your non-Plugin stuff after this line

    " plugin configuration
    " nerdtree
    nnoremap <leader>n :NERDTree<cr>
    let g:NERDTreeIgnore=['\.pyc','\.o']
    let g:NERDTreeWinPos = "left"
    let g:NERDTreeQuitOnOpen=1
    let g:NERDTreeShowBookmarks=0
    let g:NERDTreeWinSize = 40
    let g:NERDTreeHijackNetrw = 1

    " ctrlp.vim
    noremap <C-p> <nop>
    noremap! <C-p> <esc>
    nnoremap <leader>p :CtrlP<cr>
    nnoremap <leader>b :CtrlPBuffer<cr>
    nnoremap <leader>C :CtrlClearAllCaches<cr>

    " syntastic
    set statusline+=%#warningmsg#
    set statusline+=%{SyntasticStatuslineFlag()}
    set statusline+=%*
    let g:syntastic_always_populate_loc_list = 1
    let g:syntastic_auto_loc_list = 1
    let g:syntastic_check_on_open = 1
    let g:syntastic_check_on_wq = 0

    " vim-easymotion
    " <Leader>f{char} to move to {char}
    map  <Leader>f <Plug>(easymotion-bd-f)
    nmap <Leader>f <Plug>(easymotion-overwin-f)
    " s{char}{char} to move to {char}{char}
    nmap s <Plug>(easymotion-overwin-f2)
    " Move to line
    map <Leader>L <Plug>(easymotion-bd-jk)
    nmap <Leader>L <Plug>(easymotion-overwin-line)
    " Move to word
    map  <Leader>w <Plug>(easymotion-bd-w)
    nmap <Leader>w <Plug>(easymotion-overwin-w)

    " vim-airline
    let g:airline#extensions#tabline#formatter = 'unique_tail'
    let g:airline#extensions#tabline#enabled = 1
    "let g:airline#extensions#tabline#left_sep = ' '
    "let g:airline#extensions#tabline#left_alt_sep = '|'

    " vim-airline-theme
    let g:airline_theme='base16_ashes'

    " vim-obsession
    set statusline+=%{ObsessionStatus()}

"""""""""""""""""""""""""""""""
""" <end> plugin area <end> """
"""""""""""""""""""""""""""""""

" latex syntax highlighting
filetype plugin on
if has('gui_running')
    set grepprg=grep\ -nH\ $*
    filetype indent on
    let g:tex_flavor='latex'
endif

" enable folding in latex
let g:tex_fold_enabled=1

" save and compile latex files
autocmd FileType tex map <F1> :cd %:h \| :w \| :!pdflatex "%" && okular "%:r.pdf" <cr> <enter>

" save and compile c, c++ and c# programs
autocmd FileType c map <F1> :cd %:h \| :w \| :!echo -e "\033c" && g++ "%" -o "%:r" && "./%:r" <cr>
autocmd FileType cpp map <F1> :cd %:h \| :w \| :!echo -e "\033c" && g++ "%" -o "%:r" && "./%:r" <cr>
autocmd FileType cs map <F1> :cd %:h \| :w \| :!echo -e "\033c" && gmcs "%" && "./%:r.exe" <cr>
autocmd FileType python map <F1> :cd %:h \| :w \| :!echo -e "\033c" && python3.4 "%" <cr>

" unbind arrow keys
noremap  <up> <nop>
noremap! <up> <esc>
noremap  <down> <nop>
noremap! <down> <esc>
noremap  <left> <nop>
noremap! <left> <esc>
noremap  <right> <nop>
noremap! <right> <esc>

" split panes with leader
nnoremap <leader>e :vsplit<cr>
nnoremap <leader>o :split<cr>

" auto resize vim splits to active split
set winwidth=104
set winheight=10
set winminheight=10
set winheight=999

" show row numbers
set number

" toggle relative numbering and set to absolute on loss of focus or insert mode
set rnu
function! ToggleNumbersOn()
    set nu!
    set rnu
endfunction
function! ToggleRelativeOn()
    set rnu!
    set nu
endfunction
autocmd FocusLost * call ToggleRelativeOn()
autocmd FocusGained * call ToggleRelativeOn()
autocmd InsertEnter * call ToggleRelativeOn()
autocmd InsertLeave * call ToggleRelativeOn()

" navigate properly when lines are wrapped
nnoremap j gj
nnoremap k gk

" use 'tab' key to jump between blocks
nnoremap <tab> %
vnoremap <tab> %

" always use vertical diffs
set diffopt+=vertical

" zoom pane
nnoremap <leader>- :wincmd _<cr>:wincmd \|<cr>
nnoremap <leader>= :wincmd =<cr>

" resize pane
nnoremap <silent> <right> :vertical resize +5<cr>
nnoremap <silent> <left> :vertical resize -5<cr>
nnoremap <silent> <up> :resize -5<cr>
nnoremap <silent> <down> :resize +5<cr>

" character formatting
set list listchars=tab:»·,trail:·
set listchars=eol:¬,precedes:«,extends:»,tab:»·,trail:·

" toggle character formatting and row numbers
nnoremap <silent> <f2> :set list! number! relativenumber! \| :call FoldColumnToggle()<cr>

" workaround to prevent weird characters popping up
" https://github.com/neovim/neovim/wiki/FAQ#nvim-shows-weird-symbols-2-q-when-changing-modes
set guicursor=

" redo
nnoremap U :redo<cr>

" toggle search highlighting
nnoremap <silent> <f3> :set hlsearch!<cr>

" set and color column, highlight overlength characters (only insert mode)
highlight ColorColumn ctermfg=white ctermbg=red guibg=lightred
highlight OverLength ctermfg=white ctermbg=red guibg=lightred
if exists("&colorcolumn")
    autocmd InsertEnter * set colorcolumn=80
    autocmd InsertLeave * set colorcolumn=""
    " highlight overlength
    autocmd InsertEnter * match OverLength /\%81v.\+/
    autocmd InsertLeave * match OverLength //
endif

" colourise cursor line
highlight CursorLine ctermbg=black guibg=lightgrey
" toggle cursor highlighting
nnoremap <f4> :set cursorline! cursorcolumn!<cr>
