# {{ ansible_managed }}
#############################################################################
# Copyright 2018 Ramon Fischer                                              #
#                                                                           #
# Licensed under the Apache License, Version 2.0 (the "License");           #
# you may not use this file except in compliance with the License.          #
# You may obtain a copy of the License at                                   #
#                                                                           #
#     http://www.apache.org/licenses/LICENSE-2.0                            #
#                                                                           #
# Unless required by applicable law or agreed to in writing, software       #
# distributed under the License is distributed on an "AS IS" BASIS,         #
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  #
# See the License for the specific language governing permissions and       #
# limitations under the License.                                            #
#############################################################################

# unbound keys
unbind-key c # create new window
unbind-key C-b # prefix
unbind-key & # kill window
unbind-key C-z # suspend client
unbind-key C-s # horizontal window split
unbind-key C-v # vertical window split
unbind-key % # horizontal window split
unbind-key '"' # vertical window split
unbind-key o # ?
unbind-key [ # enter copy mode
unbind-key n # ?
unbind-key ] # paste contents of buffer_0
unbind-key p # ?
unbind-key M-n # next window
unbind-key M-p # previous window
unbind-key M-o # rotate window
unbind-key M-1 # select layout even horizontal
unbind-key M-2 # select layout even vertical
unbind-key M-3 # select layout main horizontal
unbind-key M-4 # select layout main vertical

# define prefix
set-option -g prefix "C-a"
bind-key C-a "send-prefix"

# kill session
bind-key K confirm-before -p "kill session #{session_name}? (y/n)" "kill-session"

# default shell
set-option -g default-shell "/bin/zsh"

# default command
#set-option -g default-command "exec /bin/bash"

# default terminal colour
set-option -g default-terminal "screen-256color"

# set history limit
set-option -g history-limit "100000"

# reload user tmux config
bind-key R source-file "${HOME}/.tmux.conf"\; display-message "reloaded ${HOME}/.tmux.conf"

# lock tmux after 30 minutes with "cmatrix" as screensaver
#set-option -g lock-command "cmatrix -sab"
#set-option -g lock-after-time "1800"
#set-option -g lock-server "on"

# message bar colour
set-option -g message-style "bg=black,fg=yellow,bright,underscore"

# enable status bar
set-option -g status "on"

# global status bar attributes
set-option -g status-attr "bold"

# global left status bar attributes
#set-option -g status-left-attr "bold"

# global right status bar attributes
#set-option -g status-right-attr "bold"

# set character limit
#set-option -g status-left-length "28"

# set status bar refresh interval
set-option -g status-interval "2"

# bash: to figure out tmux colour palette
#for i in {0..255}; do
#    printf "\x1b[38;5;${i}mcolour${i}\x1b[0m\n"
#done

# status left: @hostname:sessionname
#set-option -g status-left "#[fg=white]@#{host_short}#[fg=red]:#{session_name}#[fg=white] |"

# status left: username@hostname:sessionname
#set-option -g status-left '#[fg=blue]#(echo $(id -un))#[fg=white]@#{host_short}#[fg=magenta]:#{session_name}#[fg=white]"

# status right: date and time
#set-option -g status-right-length "16"
#set-option -g status-right "#[fg=yellow,bold]%Y-%m-%d %H:%M:%S"

# status right: time
#set-option -g status-right-length "6"
#set-option -g status-right "#[fg=yellow,bold]%H:%M"

# status right: uptime
set-option -g status-right-length "80"
set-option -g status-right "#[fg=white,nobold] 勇 #[fg=magenta,bold]#(echo $(( $(cat /sys/devices/system/cpu/cpu0/cpufreq/scaling_cur_freq) / 1000 ))) (#(echo $(( $(cat /sys/devices/system/cpu/cpu0/cpufreq/scaling_min_freq) / 1000 )) )/#(echo $(( $(cat /sys/devices/system/cpu/cpu0/cpufreq/scaling_max_freq) / 1000 )))) MHz #[fg=white]/ #[fg=blue]#(echo $(( $(cat /sys/class/thermal/thermal_zone0/temp) / 1000 )) )°C #[fg=white]/ #[fg=yellow,bold]#(uptime -p)"

# status line appearance
set-option -g status-bg "black"
set-option -g status-fg "white"

# tmux memory and cpu usage
set-option -g status-left-length "80"
#set-option -g status-interval "2"
set-option -g status-left "Mem: [#[fg=cyan,bold]#(echo $(free -m | awk 'NR == 2, OFS=\"/\" { print $3, $2 }'))#[fg=white,bold]] / Load: [#[fg=green,bold]#(echo $(uptime | awk -F 'average: ' '{ print $2 }'))#[fg=white,bold]] #[fg=magenta]#(echo $(id -un))#[fg=white]@#{host_short}#[fg=cyan]:#{session_name}#[fg=white,nobold] 勇 "

# position pane status
set-option -g pane-border-status "top"

# pane status
set-option -g pane-border-style "fg=magenta,dim"; set-option -g pane-active-border-style "fg=magenta,reverse"
set-option -g pane-border-format "#P:#{pane_current_command}[#(pane_synchronized)][#(wemux status_users)]"

# set first window to index 1 (not 0) to map more to the keyboard layout
set-option -g base-index "1"
set-option -g pane-base-index "1"

# disable renaming windows by other programs
set-option -g allow-rename "off"
set-window-option -g automatic-rename "off"

# centre window list
set-option -g status-justify "centre"

# arrange windows
bind-key -n M-1 select-layout "even-horizontal"
bind-key -n M-2 select-layout "even-vertical"
bind-key -n M-3 select-layout "tiled"
bind-key -n M-o select-layout "main-horizontal"
bind-key -n M-e select-layout "main-vertical"

# set window status appearance
set-option -g renumber-windows "on"
#set-window-option -g window-status-fg "blue"
#set-window-option -g window-status-bg "black"
#set-window-option -g window-status-current-attr "bold"
set-window-option -g monitor-activity "on"
set-window-option -g bell-action "other"
#set-window-option -g bell-on-alert "on"
set-window-option -g window-status-activity-style "fg=yellow,blink"
set-window-option -g window-status-bell-style "fg=red,blink"
set-window-option -g window-status-last-style "fg=magenta"
#set-window-option -g window-status-format "#[fg=white]#{window_index}:#[fg=green]#{pane_current_command}#[fg=blue]::#(echo '#{pane_current_path}' | awk -F '/' 'BEGIN{ OFS=\"/\"; } { print $(NF) }')#[fg=white]#{window_flags}"
set-window-option -g window-status-current-format "#[fg=white]#{window_index}:#[fg=green]#{pane_current_command}#[fg=blue]::#(echo '#{pane_current_path}' | awk -F '/' 'BEGIN{ OFS=\"/\"; } { print $(NF-1),$(NF) }')#[fg=white]#{window_flags}"
set-window-option -g window-status-separator "#[fg=white] | "

# split window horizontally (PREFIX + o)
bind-key o split-window -c "#{pane_current_path}"

# split window vertically (PREFIX + e)
bind-key e split-window -h -c "#{pane_current_path}"

# synchronize panes
bind-key s set-window-option "synchronize-panes"

# create new window (PREFIX + c)
bind-key c new-window -c "#{pane_current_path}"

# convenient window navigation
bind-key -n M-n select-window -t ":+"
bind-key -n M-p select-window -t ":-"

# jump between words like in bash
set-window-option -g xterm-keys "on"

# set time to display panes
set-option -g display-panes-time "3000"

# select pane by number
bind-key q "display-panes"

# break pane to new window (PREFIX + !)
bind-key ! "break-pane"

# join/send the last active pane to the currently active window (PREFIX + ", PREFIX + ^)
bind-key '"' command-prompt -p "join pane from:"  "join-pane -s ':%%'"
bind-key ^ command-prompt -p "send pane to:"  "join-pane -t ':%%'"

# kill window (PREFIX + k)
bind-key k confirm-before -p "kill window #{window_name}? (y/n)" "kill-window"

# turn mouse mode on (PREFIX + m)
bind-key m \
    set-option -g mouse "on"\; display-message "mouse mode: on"

# turn mouse mode off (PREFIX + M)
bind-key M \
    set-option -g mouse "off"\; display-message "mouse mode: off"

# vim style copy/paste (PREFIX + y, PREFIX + p)
bind-key y "copy-mode"
bind-key p "paste-buffer"
bind-key -t vi-copy v "begin-selection"
bind-key -t vi-copy y "copy-selection"
# comment out for tmux copycat
#bind-key -t vi-copy escape "cancel"

# options for neovim
set-option -sg escape-time "10"

# tmux navigator
# workaround to preserve tmux variable for neovim when using "sudo -i" or "sudo -s"
# /etc/sudoers: Defaults env_keep += "TMUX"
# smart pane switching with awareness of vim splits
is_vim="ps -o state= -o comm= -t '#{pane_tty}' | grep -iqE '^[^TXZ ]+ +(\\S+\\/)?g?(view|n?vim?x?)(diff)?$'"
bind-key -n C-h if-shell "${is_vim}" "send-keys C-h" "select-pane -L"
bind-key -n C-j if-shell "${is_vim}" "send-keys C-j" "select-pane -D"
bind-key -n C-k if-shell "${is_vim}" "send-keys C-k" "select-pane -U"
bind-key -n C-l if-shell "${is_vim}" "send-keys C-l" "select-pane -R"
#bind-key -n C-\\ if-shell "${is_vim}" "send-keys C-\\" "select-pane -l"
bind-key -T copy-mode-vi C-h select-pane "-L"
bind-key -T copy-mode-vi C-j select-pane "-D"
bind-key -T copy-mode-vi C-k select-pane "-U"
bind-key -T copy-mode-vi C-l select-pane "-R"
#bind-key -T copy-mode-vi C-\\ select-pane -l
# bring back clear screen (PREFIX + CTRL + l)
bind-key C-l send-keys "C-l"

# tmux resurrect
run-shell "/usr/local/share/git/tmux/tmux-resurrect/resurrect.tmux"
# resurrect save directory
#set-option -g @resurrect-dir "~/.tmux/resurrect"
# for vim
set-option -g @resurrect-strategy-vim "session"
# for neovim
set-option -g @resurrect-strategy-nvim "session"
# restore pane contents
#set-option -g @resurrect-capture-pane-contents "on"
